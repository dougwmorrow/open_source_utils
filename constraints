/*
=====================================================
TABLE DATA TYPE & FORMAT ANALYSIS SCRIPT
=====================================================
Analyzes a specific table for data type mismatches and patterns
Returns detailed findings for each column
=====================================================
*/

-- CONFIGURATION - MODIFY THESE PARAMETERS
DECLARE @TableName NVARCHAR(500) = 'dbo.YourTableName'; -- Format: [schema].[table] or [server].[database].[schema].[table]
DECLARE @TopSamples INT = 10; -- Number of sample values to return
DECLARE @MinPercentageForFinding DECIMAL(5,2) = 10.0; -- Minimum % to report a finding

-- Initialize results table
IF OBJECT_ID('tempdb..#AnalysisResults') IS NOT NULL
    DROP TABLE #AnalysisResults;

CREATE TABLE #AnalysisResults (
    ColumnName NVARCHAR(128),
    CurrentDataType NVARCHAR(50),
    PatternType NVARCHAR(50),
    MatchCount INT,
    TotalNonNullCount INT,
    MatchPercentage DECIMAL(5,2),
    SuggestedDataType NVARCHAR(50),
    MinValue NVARCHAR(MAX),
    MaxValue NVARCHAR(MAX),
    AvgLength INT,
    MaxLength INT,
    SampleValues NVARCHAR(MAX),
    ConversionNotes NVARCHAR(MAX)
);

-- Get column information
DECLARE @SQL NVARCHAR(MAX);
DECLARE @ColumnName NVARCHAR(128);
DECLARE @DataType NVARCHAR(50);
DECLARE @TotalRows INT;

-- Get total row count
SET @SQL = N'SELECT @Count = COUNT(*) FROM ' + @TableName;
EXEC sp_executesql @SQL, N'@Count INT OUTPUT', @Count = @TotalRows OUTPUT;

PRINT '========================================';
PRINT 'TABLE ANALYSIS: ' + @TableName;
PRINT 'Total Rows: ' + CAST(@TotalRows AS VARCHAR(20));
PRINT '========================================';
PRINT '';

-- Create cursor for varchar columns
DECLARE column_cursor CURSOR FOR
    SELECT 
        COLUMN_NAME,
        DATA_TYPE + CASE 
            WHEN CHARACTER_MAXIMUM_LENGTH IS NOT NULL THEN 
                '(' + CASE WHEN CHARACTER_MAXIMUM_LENGTH = -1 THEN 'MAX' 
                      ELSE CAST(CHARACTER_MAXIMUM_LENGTH AS VARCHAR(10)) END + ')'
            ELSE ''
        END AS DataType
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_SCHEMA + '.' + TABLE_NAME = REPLACE(REPLACE(@TableName, '[', ''), ']', '')
        AND DATA_TYPE IN ('varchar', 'nvarchar', 'char', 'nchar', 'text', 'ntext')
    ORDER BY ORDINAL_POSITION;

OPEN column_cursor;
FETCH NEXT FROM column_cursor INTO @ColumnName, @DataType;

WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT 'Analyzing column: ' + @ColumnName + ' (' + @DataType + ')';
    
    -- 1. NUMERIC PATTERN DETECTION
    SET @SQL = N'
    WITH NumericAnalysis AS (
        SELECT 
            COUNT(*) as TotalCount,
            SUM(CASE WHEN ' + QUOTENAME(@ColumnName) + ' NOT LIKE ''%[^0-9.-]%'' 
                     AND ' + QUOTENAME(@ColumnName) + ' NOT LIKE ''%-%-%''
                     AND ' + QUOTENAME(@ColumnName) + ' NOT LIKE ''%.%.%''
                     AND LEN(' + QUOTENAME(@ColumnName) + ') > 0
                THEN 1 ELSE 0 END) as NumericCount,
            SUM(CASE WHEN TRY_CAST(' + QUOTENAME(@ColumnName) + ' AS INT) IS NOT NULL THEN 1 ELSE 0 END) as IntCount,
            SUM(CASE WHEN TRY_CAST(' + QUOTENAME(@ColumnName) + ' AS DECIMAL(18,4)) IS NOT NULL 
                     AND TRY_CAST(' + QUOTENAME(@ColumnName) + ' AS INT) IS NULL THEN 1 ELSE 0 END) as DecimalCount,
            MIN(LEN(' + QUOTENAME(@ColumnName) + ')) as MinLen,
            MAX(LEN(' + QUOTENAME(@ColumnName) + ')) as MaxLen,
            AVG(LEN(' + QUOTENAME(@ColumnName) + ')) as AvgLen
        FROM ' + @TableName + '
        WHERE ' + QUOTENAME(@ColumnName) + ' IS NOT NULL
    )
    INSERT INTO #AnalysisResults
    SELECT 
        ''' + @ColumnName + ''',
        ''' + @DataType + ''',
        ''Numeric Pattern'',
        NumericCount,
        TotalCount,
        CAST(NumericCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)),
        CASE 
            WHEN IntCount = NumericCount AND MaxLen <= 9 THEN ''INT''
            WHEN IntCount = NumericCount AND MaxLen <= 18 THEN ''BIGINT''
            WHEN DecimalCount > 0 THEN ''DECIMAL(18,4)''
            WHEN NumericCount > 0 THEN ''FLOAT''
            ELSE ''N/A''
        END,
        (SELECT MIN(' + QUOTENAME(@ColumnName) + ') FROM ' + @TableName + ' 
         WHERE ' + QUOTENAME(@ColumnName) + ' NOT LIKE ''%[^0-9.-]%''),
        (SELECT MAX(' + QUOTENAME(@ColumnName) + ') FROM ' + @TableName + ' 
         WHERE ' + QUOTENAME(@ColumnName) + ' NOT LIKE ''%[^0-9.-]%''),
        AvgLen,
        MaxLen,
        STUFF((SELECT TOP ' + CAST(@TopSamples AS VARCHAR(10)) + ' ''; '' + ' + QUOTENAME(@ColumnName) + '
               FROM ' + @TableName + '
               WHERE ' + QUOTENAME(@ColumnName) + ' NOT LIKE ''%[^0-9.-]%''
                 AND ' + QUOTENAME(@ColumnName) + ' IS NOT NULL
               ORDER BY ' + QUOTENAME(@ColumnName) + '
               FOR XML PATH('''')), 1, 2, ''''),
        CASE 
            WHEN NumericCount > 0 AND NumericCount < TotalCount 
            THEN ''Warning: '' + CAST(TotalCount - NumericCount AS VARCHAR(20)) + '' non-numeric values found''
            ELSE ''''
        END
    FROM NumericAnalysis
    WHERE NumericCount > 0 
      AND CAST(NumericCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)) >= ' + CAST(@MinPercentageForFinding AS VARCHAR(10));
    
    EXEC sp_executesql @SQL;
    
    -- 2. DATE/DATETIME PATTERN DETECTION
    SET @SQL = N'
    WITH DateAnalysis AS (
        SELECT 
            COUNT(*) as TotalCount,
            SUM(CASE WHEN TRY_CAST(' + QUOTENAME(@ColumnName) + ' AS DATE) IS NOT NULL THEN 1 ELSE 0 END) as ValidDateCount,
            SUM(CASE WHEN ' + QUOTENAME(@ColumnName) + ' LIKE ''[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]%'' THEN 1 ELSE 0 END) as ISO_Count,
            SUM(CASE WHEN ' + QUOTENAME(@ColumnName) + ' LIKE ''[0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9]%'' THEN 1 ELSE 0 END) as US_Count,
            SUM(CASE WHEN ' + QUOTENAME(@ColumnName) + ' LIKE ''[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]%'' THEN 1 ELSE 0 END) as EU_Count,
            MAX(LEN(' + QUOTENAME(@ColumnName) + ')) as MaxLen
        FROM ' + @TableName + '
        WHERE ' + QUOTENAME(@ColumnName) + ' IS NOT NULL AND LEN(' + QUOTENAME(@ColumnName) + ') >= 8
    )
    INSERT INTO #AnalysisResults
    SELECT 
        ''' + @ColumnName + ''',
        ''' + @DataType + ''',
        ''Date/DateTime Pattern'',
        ValidDateCount,
        TotalCount,
        CAST(ValidDateCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)),
        CASE 
            WHEN MaxLen <= 10 THEN ''DATE''
            WHEN MaxLen > 10 THEN ''DATETIME''
            ELSE ''DATE''
        END,
        (SELECT MIN(TRY_CAST(' + QUOTENAME(@ColumnName) + ' AS DATE)) FROM ' + @TableName + '),
        (SELECT MAX(TRY_CAST(' + QUOTENAME(@ColumnName) + ' AS DATE)) FROM ' + @TableName + '),
        NULL,
        MaxLen,
        STUFF((SELECT TOP ' + CAST(@TopSamples AS VARCHAR(10)) + ' ''; '' + ' + QUOTENAME(@ColumnName) + '
               FROM ' + @TableName + '
               WHERE TRY_CAST(' + QUOTENAME(@ColumnName) + ' AS DATE) IS NOT NULL
               ORDER BY ' + QUOTENAME(@ColumnName) + '
               FOR XML PATH('''')), 1, 2, ''''),
        ''ISO: '' + CAST(ISO_Count AS VARCHAR(20)) + 
        '', US: '' + CAST(US_Count AS VARCHAR(20)) + 
        '', EU: '' + CAST(EU_Count AS VARCHAR(20))
    FROM DateAnalysis
    WHERE ValidDateCount > 0 
      AND CAST(ValidDateCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)) >= ' + CAST(@MinPercentageForFinding AS VARCHAR(10));
    
    EXEC sp_executesql @SQL;
    
    -- 3. JSON DETECTION
    SET @SQL = N'
    WITH JsonAnalysis AS (
        SELECT 
            COUNT(*) as TotalCount,
            SUM(CASE WHEN ISJSON(' + QUOTENAME(@ColumnName) + ') = 1 THEN 1 ELSE 0 END) as JsonCount,
            AVG(LEN(' + QUOTENAME(@ColumnName) + ')) as AvgLen,
            MAX(LEN(' + QUOTENAME(@ColumnName) + ')) as MaxLen
        FROM ' + @TableName + '
        WHERE ' + QUOTENAME(@ColumnName) + ' IS NOT NULL
    )
    INSERT INTO #AnalysisResults
    SELECT 
        ''' + @ColumnName + ''',
        ''' + @DataType + ''',
        ''JSON Data'',
        JsonCount,
        TotalCount,
        CAST(JsonCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)),
        ''NVARCHAR(MAX) CHECK(ISJSON(column)=1)'',
        NULL,
        NULL,
        AvgLen,
        MaxLen,
        (SELECT TOP 1 LEFT(' + QUOTENAME(@ColumnName) + ', 200) + ''...''
         FROM ' + @TableName + '
         WHERE ISJSON(' + QUOTENAME(@ColumnName) + ') = 1),
        ''Valid JSON documents found''
    FROM JsonAnalysis
    WHERE JsonCount > 0 
      AND CAST(JsonCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)) >= ' + CAST(@MinPercentageForFinding AS VARCHAR(10));
    
    EXEC sp_executesql @SQL;
    
    -- 4. XML DETECTION
    SET @SQL = N'
    WITH XmlAnalysis AS (
        SELECT 
            COUNT(*) as TotalCount,
            SUM(CASE WHEN TRY_CAST(' + QUOTENAME(@ColumnName) + ' AS XML) IS NOT NULL THEN 1 ELSE 0 END) as XmlCount,
            AVG(LEN(' + QUOTENAME(@ColumnName) + ')) as AvgLen,
            MAX(LEN(' + QUOTENAME(@ColumnName) + ')) as MaxLen
        FROM ' + @TableName + '
        WHERE ' + QUOTENAME(@ColumnName) + ' IS NOT NULL 
          AND ' + QUOTENAME(@ColumnName) + ' LIKE ''<%>%</%>''
    )
    INSERT INTO #AnalysisResults
    SELECT 
        ''' + @ColumnName + ''',
        ''' + @DataType + ''',
        ''XML Data'',
        XmlCount,
        TotalCount,
        CAST(XmlCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)),
        ''XML'',
        NULL,
        NULL,
        AvgLen,
        MaxLen,
        (SELECT TOP 1 LEFT(' + QUOTENAME(@ColumnName) + ', 200) + ''...''
         FROM ' + @TableName + '
         WHERE TRY_CAST(' + QUOTENAME(@ColumnName) + ' AS XML) IS NOT NULL),
        ''Valid XML documents found''
    FROM XmlAnalysis
    WHERE XmlCount > 0 
      AND CAST(XmlCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)) >= ' + CAST(@MinPercentageForFinding AS VARCHAR(10));
    
    EXEC sp_executesql @SQL;
    
    -- 5. BASE64 DETECTION
    SET @SQL = N'
    WITH Base64Analysis AS (
        SELECT 
            COUNT(*) as TotalCount,
            SUM(CASE WHEN LEN(' + QUOTENAME(@ColumnName) + ') >= 4 
                     AND LEN(' + QUOTENAME(@ColumnName) + ') % 4 = 0
                     AND ' + QUOTENAME(@ColumnName) + ' NOT LIKE ''%[^A-Za-z0-9+/=]%''
                THEN 1 ELSE 0 END) as Base64Count,
            AVG(LEN(' + QUOTENAME(@ColumnName) + ')) as AvgLen,
            MAX(LEN(' + QUOTENAME(@ColumnName) + ')) as MaxLen
        FROM ' + @TableName + '
        WHERE ' + QUOTENAME(@ColumnName) + ' IS NOT NULL
    )
    INSERT INTO #AnalysisResults
    SELECT 
        ''' + @ColumnName + ''',
        ''' + @DataType + ''',
        ''Base64 Encoded'',
        Base64Count,
        TotalCount,
        CAST(Base64Count * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)),
        ''VARBINARY(MAX)'',
        NULL,
        NULL,
        AvgLen,
        MaxLen,
        STUFF((SELECT TOP ' + CAST(@TopSamples AS VARCHAR(10)) + ' ''; '' + LEFT(' + QUOTENAME(@ColumnName) + ', 50)
               FROM ' + @TableName + '
               WHERE LEN(' + QUOTENAME(@ColumnName) + ') >= 4 
                 AND LEN(' + QUOTENAME(@ColumnName) + ') % 4 = 0
                 AND ' + QUOTENAME(@ColumnName) + ' NOT LIKE ''%[^A-Za-z0-9+/=]%''
               FOR XML PATH('''')), 1, 2, ''''),
        ''Possible Base64 encoded binary data''
    FROM Base64Analysis
    WHERE Base64Count > 0 
      AND CAST(Base64Count * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)) >= ' + CAST(@MinPercentageForFinding AS VARCHAR(10));
    
    EXEC sp_executesql @SQL;
    
    -- 6. HEXADECIMAL DETECTION
    SET @SQL = N'
    WITH HexAnalysis AS (
        SELECT 
            COUNT(*) as TotalCount,
            SUM(CASE WHEN (LEN(' + QUOTENAME(@ColumnName) + ') >= 2 
                      AND LEN(' + QUOTENAME(@ColumnName) + ') % 2 = 0
                      AND (' + QUOTENAME(@ColumnName) + ' LIKE ''0x%'' OR ' + QUOTENAME(@ColumnName) + ' NOT LIKE ''%[^0-9A-Fa-f]%''))
                THEN 1 ELSE 0 END) as HexCount,
            AVG(LEN(' + QUOTENAME(@ColumnName) + ')) as AvgLen,
            MAX(LEN(' + QUOTENAME(@ColumnName) + ')) as MaxLen
        FROM ' + @TableName + '
        WHERE ' + QUOTENAME(@ColumnName) + ' IS NOT NULL
    )
    INSERT INTO #AnalysisResults
    SELECT 
        ''' + @ColumnName + ''',
        ''' + @DataType + ''',
        ''Hexadecimal Data'',
        HexCount,
        TotalCount,
        CAST(HexCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)),
        ''VARBINARY(MAX)'',
        NULL,
        NULL,
        AvgLen,
        MaxLen,
        STUFF((SELECT TOP ' + CAST(@TopSamples AS VARCHAR(10)) + ' ''; '' + LEFT(' + QUOTENAME(@ColumnName) + ', 50)
               FROM ' + @TableName + '
               WHERE LEN(' + QUOTENAME(@ColumnName) + ') >= 2 
                 AND LEN(' + QUOTENAME(@ColumnName) + ') % 2 = 0
                 AND (' + QUOTENAME(@ColumnName) + ' LIKE ''0x%'' OR ' + QUOTENAME(@ColumnName) + ' NOT LIKE ''%[^0-9A-Fa-f]%'')
               FOR XML PATH('''')), 1, 2, ''''),
        ''Possible hexadecimal encoded data''
    FROM HexAnalysis
    WHERE HexCount > 0 
      AND CAST(HexCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)) >= ' + CAST(@MinPercentageForFinding AS VARCHAR(10));
    
    EXEC sp_executesql @SQL;
    
    -- 7. CURRENCY PATTERN DETECTION
    SET @SQL = N'
    WITH CurrencyAnalysis AS (
        SELECT 
            COUNT(*) as TotalCount,
            SUM(CASE WHEN ' + QUOTENAME(@ColumnName) + ' LIKE ''[$£€¥]%'' 
                      OR ' + QUOTENAME(@ColumnName) + ' LIKE ''%[ ]USD%''
                      OR ' + QUOTENAME(@ColumnName) + ' LIKE ''%[ ]EUR%''
                      OR ' + QUOTENAME(@ColumnName) + ' LIKE ''%[ ]GBP%''
                THEN 1 ELSE 0 END) as CurrencyCount,
            MIN(TRY_CAST(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(' + QUOTENAME(@ColumnName) + ', ''$'', ''''), ''£'', ''''), ''€'', ''''), ''¥'', ''''), '','', '''') AS MONEY)) as MinAmount,
            MAX(TRY_CAST(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(' + QUOTENAME(@ColumnName) + ', ''$'', ''''), ''£'', ''''), ''€'', ''''), ''¥'', ''''), '','', '''') AS MONEY)) as MaxAmount
        FROM ' + @TableName + '
        WHERE ' + QUOTENAME(@ColumnName) + ' IS NOT NULL
    )
    INSERT INTO #AnalysisResults
    SELECT 
        ''' + @ColumnName + ''',
        ''' + @DataType + ''',
        ''Currency Pattern'',
        CurrencyCount,
        TotalCount,
        CAST(CurrencyCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)),
        ''MONEY'',
        CAST(MinAmount AS NVARCHAR(50)),
        CAST(MaxAmount AS NVARCHAR(50)),
        NULL,
        NULL,
        STUFF((SELECT TOP ' + CAST(@TopSamples AS VARCHAR(10)) + ' ''; '' + ' + QUOTENAME(@ColumnName) + '
               FROM ' + @TableName + '
               WHERE ' + QUOTENAME(@ColumnName) + ' LIKE ''[$£€¥]%'' 
                  OR ' + QUOTENAME(@ColumnName) + ' LIKE ''%USD%''
                  OR ' + QUOTENAME(@ColumnName) + ' LIKE ''%EUR%''
               FOR XML PATH('''')), 1, 2, ''''),
        ''Currency symbols detected''
    FROM CurrencyAnalysis
    WHERE CurrencyCount > 0 
      AND CAST(CurrencyCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)) >= ' + CAST(@MinPercentageForFinding AS VARCHAR(10));
    
    EXEC sp_executesql @SQL;
    
    -- 8. PHONE NUMBER PATTERN DETECTION
    SET @SQL = N'
    WITH PhoneAnalysis AS (
        SELECT 
            COUNT(*) as TotalCount,
            SUM(CASE WHEN ' + QUOTENAME(@ColumnName) + ' LIKE ''[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]''
                      OR ' + QUOTENAME(@ColumnName) + ' LIKE ''([0-9][0-9][0-9]) [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]''
                      OR ' + QUOTENAME(@ColumnName) + ' LIKE ''+[0-9]%''
                      OR ' + QUOTENAME(@ColumnName) + ' LIKE ''[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]''
                      OR ' + QUOTENAME(@ColumnName) + ' LIKE ''[0-9][0-9][0-9].[0-9][0-9][0-9].[0-9][0-9][0-9][0-9]''
                THEN 1 ELSE 0 END) as PhoneCount,
            MAX(LEN(' + QUOTENAME(@ColumnName) + ')) as MaxLen
        FROM ' + @TableName + '
        WHERE ' + QUOTENAME(@ColumnName) + ' IS NOT NULL
    )
    INSERT INTO #AnalysisResults
    SELECT 
        ''' + @ColumnName + ''',
        ''' + @DataType + ''',
        ''Phone Number'',
        PhoneCount,
        TotalCount,
        CAST(PhoneCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)),
        ''VARCHAR(20)'',
        NULL,
        NULL,
        NULL,
        MaxLen,
        STUFF((SELECT TOP ' + CAST(@TopSamples AS VARCHAR(10)) + ' ''; '' + ' + QUOTENAME(@ColumnName) + '
               FROM ' + @TableName + '
               WHERE ' + QUOTENAME(@ColumnName) + ' LIKE ''[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]''
                  OR ' + QUOTENAME(@ColumnName) + ' LIKE ''([0-9][0-9][0-9]) [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]''
                  OR ' + QUOTENAME(@ColumnName) + ' LIKE ''+[0-9]%''
               FOR XML PATH('''')), 1, 2, ''''),
        ''Phone number patterns detected''
    FROM PhoneAnalysis
    WHERE PhoneCount > 0 
      AND CAST(PhoneCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)) >= ' + CAST(@MinPercentageForFinding AS VARCHAR(10));
    
    EXEC sp_executesql @SQL;
    
    -- 9. POSTAL/ZIP CODE PATTERN DETECTION
    SET @SQL = N'
    WITH PostalAnalysis AS (
        SELECT 
            COUNT(*) as TotalCount,
            SUM(CASE WHEN ' + QUOTENAME(@ColumnName) + ' LIKE ''[0-9][0-9][0-9][0-9][0-9]''
                      OR ' + QUOTENAME(@ColumnName) + ' LIKE ''[0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]''
                      OR ' + QUOTENAME(@ColumnName) + ' LIKE ''[A-Z][0-9][A-Z] [0-9][A-Z][0-9]''
                      OR ' + QUOTENAME(@ColumnName) + ' LIKE ''[A-Z][A-Z][0-9] [0-9][A-Z][A-Z]''
                THEN 1 ELSE 0 END) as PostalCount,
            SUM(CASE WHEN ' + QUOTENAME(@ColumnName) + ' LIKE ''[0-9][0-9][0-9][0-9][0-9]'' THEN 1 ELSE 0 END) as USZipCount,
            SUM(CASE WHEN ' + QUOTENAME(@ColumnName) + ' LIKE ''[A-Z][0-9][A-Z] [0-9][A-Z][0-9]'' THEN 1 ELSE 0 END) as CanadaCount,
            SUM(CASE WHEN ' + QUOTENAME(@ColumnName) + ' LIKE ''[A-Z][A-Z][0-9]%[0-9][A-Z][A-Z]'' THEN 1 ELSE 0 END) as UKCount
        FROM ' + @TableName + '
        WHERE ' + QUOTENAME(@ColumnName) + ' IS NOT NULL
    )
    INSERT INTO #AnalysisResults
    SELECT 
        ''' + @ColumnName + ''',
        ''' + @DataType + ''',
        ''Postal/ZIP Code'',
        PostalCount,
        TotalCount,
        CAST(PostalCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)),
        ''VARCHAR(10)'',
        NULL,
        NULL,
        NULL,
        NULL,
        STUFF((SELECT TOP ' + CAST(@TopSamples AS VARCHAR(10)) + ' ''; '' + ' + QUOTENAME(@ColumnName) + '
               FROM ' + @TableName + '
               WHERE ' + QUOTENAME(@ColumnName) + ' LIKE ''[0-9][0-9][0-9][0-9][0-9]''
                  OR ' + QUOTENAME(@ColumnName) + ' LIKE ''[0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]''
                  OR ' + QUOTENAME(@ColumnName) + ' LIKE ''[A-Z][0-9][A-Z] [0-9][A-Z][0-9]''
               FOR XML PATH('''')), 1, 2, ''''),
        ''US: '' + CAST(USZipCount AS VARCHAR(20)) + 
        '', Canada: '' + CAST(CanadaCount AS VARCHAR(20)) + 
        '', UK: '' + CAST(UKCount AS VARCHAR(20))
    FROM PostalAnalysis
    WHERE PostalCount > 0 
      AND CAST(PostalCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)) >= ' + CAST(@MinPercentageForFinding AS VARCHAR(10));
    
    EXEC sp_executesql @SQL;
    
    -- 10. BOOLEAN PATTERN DETECTION
    SET @SQL = N'
    WITH BooleanAnalysis AS (
        SELECT 
            COUNT(*) as TotalCount,
            SUM(CASE WHEN UPPER(' + QUOTENAME(@ColumnName) + ') IN (''YES'', ''NO'', ''Y'', ''N'', ''TRUE'', ''FALSE'', ''T'', ''F'', ''1'', ''0'') 
                THEN 1 ELSE 0 END) as BooleanCount,
            COUNT(DISTINCT UPPER(' + QUOTENAME(@ColumnName) + ')) as DistinctValues
        FROM ' + @TableName + '
        WHERE ' + QUOTENAME(@ColumnName) + ' IS NOT NULL
    )
    INSERT INTO #AnalysisResults
    SELECT 
        ''' + @ColumnName + ''',
        ''' + @DataType + ''',
        ''Boolean Pattern'',
        BooleanCount,
        TotalCount,
        CAST(BooleanCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)),
        ''BIT'',
        NULL,
        NULL,
        NULL,
        NULL,
        STUFF((SELECT DISTINCT ''; '' + UPPER(' + QUOTENAME(@ColumnName) + ')
               FROM ' + @TableName + '
               WHERE UPPER(' + QUOTENAME(@ColumnName) + ') IN (''YES'', ''NO'', ''Y'', ''N'', ''TRUE'', ''FALSE'', ''T'', ''F'', ''1'', ''0'')
               FOR XML PATH('''')), 1, 2, ''''),
        ''Distinct values: '' + CAST(DistinctValues AS VARCHAR(10))
    FROM BooleanAnalysis
    WHERE BooleanCount > 0 
      AND CAST(BooleanCount * 100.0 / NULLIF(TotalCount, 0) AS DECIMAL(5,2)) >= ' + CAST(@MinPercentageForFinding AS VARCHAR(10));
    
    EXEC sp_executesql @SQL;
    
    FETCH NEXT FROM column_cursor INTO @ColumnName, @DataType;
END

CLOSE column_cursor;
DEALLOCATE column_cursor;

-- Display comprehensive results
PRINT '';
PRINT '========================================';
PRINT 'ANALYSIS COMPLETE - SUMMARY OF FINDINGS';
PRINT '========================================';
PRINT '';

-- Summary by pattern type
SELECT 
    PatternType,
    COUNT(DISTINCT ColumnName) AS ColumnsAffected,
    SUM(MatchCount) AS TotalMatches,
    AVG(MatchPercentage) AS AvgMatchPercent
FROM #AnalysisResults
GROUP BY PatternType
ORDER BY COUNT(DISTINCT ColumnName) DESC;

-- Detailed findings by column
PRINT '';
PRINT 'DETAILED FINDINGS BY COLUMN:';
PRINT '============================';

SELECT 
    ColumnName,
    CurrentDataType,
    PatternType,
    CAST(MatchPercentage AS VARCHAR(10)) + '%' AS MatchPct,
    CAST(MatchCount AS VARCHAR(20)) + '/' + CAST(TotalNonNullCount AS VARCHAR(20)) AS MatchRatio,
    SuggestedDataType,
    CASE 
        WHEN MinValue IS NOT NULL AND MaxValue IS NOT NULL 
        THEN 'Range: ' + MinValue + ' to ' + MaxValue
        ELSE ''
    END AS ValueRange,
    LEFT(SampleValues, 200) AS Samples,
    ConversionNotes
FROM #AnalysisResults
ORDER BY ColumnName, MatchPercentage DESC;

-- High confidence recommendations (90%+ match)
PRINT '';
PRINT 'HIGH CONFIDENCE RECOMMENDATIONS (90%+ Match):';
PRINT '============================================';

SELECT 
    'ALTER TABLE ' + @TableName + ' ALTER COLUMN ' + QUOTENAME(ColumnName) + ' ' + SuggestedDataType AS ConversionScript,
    PatternType,
    CAST(MatchPercentage AS VARCHAR(10)) + '%' AS Confidence,
    ConversionNotes
FROM #AnalysisResults
WHERE MatchPercentage >= 90
ORDER BY MatchPercentage DESC, ColumnName;

-- Data quality issues
PRINT '';
PRINT 'DATA QUALITY OBSERVATIONS:';
PRINT '=========================';

SELECT 
    ColumnName,
    PatternType,
    'Found ' + CAST(MatchCount AS VARCHAR(20)) + ' matching values out of ' + 
    CAST(TotalNonNullCount AS VARCHAR(20)) + ' (' + CAST(MatchPercentage AS VARCHAR(10)) + '%)' AS Finding,
    CASE 
        WHEN MatchPercentage < 100 AND MatchPercentage >= 50 
        THEN 'Consider data cleansing before conversion'
        WHEN MatchPercentage < 50 
        THEN 'Low match rate - verify pattern detection'
        ELSE 'Ready for conversion'
    END AS Recommendation
FROM #AnalysisResults
WHERE MatchPercentage < 100
ORDER BY MatchPercentage ASC;

-- Clean up
DROP TABLE #AnalysisResults;
